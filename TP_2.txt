#include <Keypad.h>
#include <LiquidCrystal.h>
#define BUTTON_RESET 1
#define BUTTON_TEST 2
#define BUTTON_CONFIG 3



LiquidCrystal lcd(8,13,A0,A1,A2,A3);

const byte FILAS = 4;
const byte COLUMNAS = 4;

//Definición de la matriz de teclas del teclado
char keys[FILAS][COLUMNAS] = {
  {'1','2','3','A'},
  {'4','5','6','B'},
  {'7','8','9','C'},
  {'*','0','#','D'}
};

//Conectar los pines de las filas del teclado.
byte pinesFilas[FILAS] = {7,6,5,4};

//Conectar los pines de las columnas del teclado.
byte pinesColumnas[COLUMNAS] = {3,2,1,0};

// se inicia el teclado.
Keypad teclado = Keypad(makeKeymap(keys), pinesFilas, pinesColumnas, FILAS, COLUMNAS );

char TECLA;
char CLAVE[7];
char CLAVE_DEFAULT[] = "1C2022";
int INDICE = 0;

unsigned long millisAnterior = 0;
int estadoLed = LOW;
int contador = 0;
int ningunBoton = 0;



  
void setup()
{  
 
  	pinMode(9, OUTPUT); //Configura el pin 11 como salida LED VERDE.
	pinMode(10, OUTPUT); //Configura el pin 10 como salida LED ROJO. 
    pinMode(11, INPUT);
    pinMode(12, INPUT);
    pinMode(A4, INPUT);
  
    lcd.begin(16, 2);
    lcd.print("Password:");//Imprime mensaje inicial por pantalla.
  
  delay(15);
}

void loop()
{
    
  TECLA = teclado.getKey();//Lee la tecla presionada.

  if(TECLA)//Si es una tecla válida, la guarda
  {
    CLAVE[INDICE] = TECLA;
    INDICE++;//Incrementa la cantidad de teclas precionadas
    lcd.print(TECLA);//Imprime tecla presionada
  }

  if(INDICE == 6)
  {
    if(!strcmp(CLAVE, CLAVE_DEFAULT))//Si la clave ingresada es correcta, se ejecuta el codigo
    {
      lcd.clear();
      lcd.print("Password Ok.");
      contador = 0;
   
    }
    else //caso contrario, muestra mensaje de error
    {
      lcd.clear();
      lcd.print("Password Fail.");
      contador = 0;  
     
     lcd.setCursor(0,1);
     lcd.print("Password:");//muestra mensaje de reintente
    
    }
    INDICE = 0;
  }
  leerBoton();
  aplicacionBotones();
  
  delay(15);
}
//lee el boton presionado y retorna su valor (reset,test,config)
int leerBoton()
{
  int valorBotonReset =digitalRead(11);
  int valorBotonTest =digitalRead(12);
  int valorBotonConfig =analogRead(A4);
  
  if(valorBotonReset)
  {
    return BUTTON_RESET;
  }
  if(valorBotonTest)
  {
    return BUTTON_TEST ;
  }
  if(valorBotonConfig)
  {
    return BUTTON_CONFIG;
  }


}
//compara boton ahora con botan antes y dependiendo el resultado imprime el mensaje.
void aplicacionBotones()
{
  int botonAntes = ningunBoton;
  int botonAhora = leerBoton();
  
  if (botonAhora != botonAntes)
  {
    switch(botonAhora)
    {
      case BUTTON_RESET:
       lcd.clear();
       lcd.print("Password: "); 
       break;
      
      case BUTTON_TEST:
      	if(strcmp(CLAVE, CLAVE_DEFAULT) == 0)
        {
          lcd.clear();
          lcd.write("Password Ok.");
      	  contador = 0;
          
         lcd.setCursor(0,1);
      	 lcd.print("Password:");
        
        }
      	else
      	{
          lcd.clear();
          lcd.write("Password Fail.");
     	  contador = 0;
          
         lcd.setCursor(0,1);
      	  lcd.print("Password:");
      	
        }
      	break;
      
      case BUTTON_CONFIG:
      INDICE = 0;
      lcd.clear();
      lcd.print("Password: ");
      for(INDICE=0; INDICE<6;)
      {
 		TECLA = teclado.getKey();
        if(TECLA)
        {
          lcd.print(TECLA);
          CLAVE[INDICE] = TECLA;
          INDICE++;
        }
      }
      if(INDICE == 6)
      {
        lcd.clear();
        strcpy(CLAVE_DEFAULT,CLAVE);
        lcd.write("New Pass.");

      }
      
      break;
    }
  }
  
  ningunBoton = botonAhora;
}
